#include "GlEnumToString.h"
#include "GL/glew.h"

#define PAIR(ENUM) {ENUM, #ENUM}

const std::unordered_map<unsigned int, std::string> GlEnumToString::type = {
PAIR(GL_BYTE),
PAIR(GL_UNSIGNED_BYTE),
PAIR(GL_SHORT),
PAIR(GL_UNSIGNED_SHORT),
PAIR(GL_INT),
PAIR(GL_UNSIGNED_INT),
PAIR(GL_FLOAT),
PAIR(GL_2_BYTES),
PAIR(GL_3_BYTES),
PAIR(GL_4_BYTES),
PAIR(GL_DOUBLE),
PAIR(GL_FLOAT_VEC2),
PAIR(GL_FLOAT_VEC3),
PAIR(GL_FLOAT_VEC4),
PAIR(GL_INT_VEC2),
PAIR(GL_INT_VEC3),
PAIR(GL_INT_VEC4),
PAIR(GL_BOOL),
PAIR(GL_BOOL_VEC2),
PAIR(GL_BOOL_VEC3),
PAIR(GL_BOOL_VEC4),
PAIR(GL_FLOAT_MAT2),
PAIR(GL_FLOAT_MAT3),
PAIR(GL_FLOAT_MAT4),
PAIR(GL_SAMPLER_1D),
PAIR(GL_SAMPLER_2D),
PAIR(GL_SAMPLER_3D),
PAIR(GL_SAMPLER_CUBE),
PAIR(GL_SAMPLER_1D_SHADOW),
PAIR(GL_SAMPLER_2D_SHADOW),
PAIR(GL_FLOAT_MAT2x3),
PAIR(GL_FLOAT_MAT2x4),
PAIR(GL_FLOAT_MAT3x2),
PAIR(GL_FLOAT_MAT3x4),
PAIR(GL_FLOAT_MAT4x2),
PAIR(GL_FLOAT_MAT4x3),
};

const std::unordered_map<unsigned int, std::string> GlEnumToString::texture = {
//TARGETS
PAIR(GL_TEXTURE_1D),
PAIR(GL_TEXTURE_2D),
PAIR(GL_TEXTURE_3D),
PAIR(GL_TEXTURE_CUBE_MAP),
//FILTERS
PAIR(GL_NEAREST),
PAIR(GL_LINEAR),
PAIR(GL_NEAREST_MIPMAP_NEAREST),
PAIR(GL_LINEAR_MIPMAP_NEAREST),
PAIR(GL_NEAREST_MIPMAP_LINEAR),
PAIR(GL_LINEAR_MIPMAP_LINEAR),
//WRAP MODES
PAIR(GL_CLAMP),
PAIR(GL_CLAMP_TO_EDGE),
PAIR(GL_REPEAT),
//FORMATS AND INTERNAL FORMATS
PAIR(GL_RED),
PAIR(GL_GREEN),
PAIR(GL_BLUE),
PAIR(GL_ALPHA),
PAIR(GL_RGB),
PAIR(GL_RGBA),
PAIR(GL_LUMINANCE),
PAIR(GL_LUMINANCE_ALPHA),
PAIR(GL_RGBA32UI),
PAIR(GL_RGB32UI),
PAIR(GL_RGBA16UI),
PAIR(GL_RGB16UI),
PAIR(GL_RGBA8UI),
PAIR(GL_RGB8UI),
PAIR(GL_RGBA32I),
PAIR(GL_RGB32I),
PAIR(GL_RGBA16I),
PAIR(GL_RGB16I),
PAIR(GL_RGBA8I),
PAIR(GL_RGB8I),
PAIR(GL_RED_INTEGER),
PAIR(GL_GREEN_INTEGER),
PAIR(GL_BLUE_INTEGER),
PAIR(GL_ALPHA_INTEGER),
PAIR(GL_RGB_INTEGER),
PAIR(GL_RGBA_INTEGER),
PAIR(GL_BGR_INTEGER),
PAIR(GL_BGRA_INTEGER),
PAIR(GL_RGBA32F),
PAIR(GL_RGB32F),
PAIR(GL_RGBA16F),
PAIR(GL_RGB16F),
PAIR(GL_ALPHA4),
PAIR(GL_ALPHA8),
PAIR(GL_ALPHA12),
PAIR(GL_ALPHA16),
PAIR(GL_LUMINANCE4),
PAIR(GL_LUMINANCE8),
PAIR(GL_LUMINANCE12),
PAIR(GL_LUMINANCE16),
PAIR(GL_LUMINANCE4_ALPHA4),
PAIR(GL_LUMINANCE6_ALPHA2),
PAIR(GL_LUMINANCE8_ALPHA8),
PAIR(GL_LUMINANCE12_ALPHA4),
PAIR(GL_LUMINANCE12_ALPHA12),
PAIR(GL_LUMINANCE16_ALPHA16),
PAIR(GL_INTENSITY),
PAIR(GL_INTENSITY4),
PAIR(GL_INTENSITY8),
PAIR(GL_INTENSITY12),
PAIR(GL_INTENSITY16),
PAIR(GL_RGB4),
PAIR(GL_RGB5),
PAIR(GL_RGB8),
PAIR(GL_RGB10),
PAIR(GL_RGB12),
PAIR(GL_RGB16),
PAIR(GL_RGBA2),
PAIR(GL_RGBA4),
PAIR(GL_RGB5_A1),
PAIR(GL_RGBA8),
PAIR(GL_RGB10_A2),
PAIR(GL_RGBA12),
PAIR(GL_RGBA16),
PAIR(GL_COMPRESSED_RED),
PAIR(GL_COMPRESSED_RG),
PAIR(GL_RG),
PAIR(GL_RG_INTEGER),
PAIR(GL_R8),
PAIR(GL_R16),
PAIR(GL_RG8),
PAIR(GL_RG16),
PAIR(GL_R16F),
PAIR(GL_R32F),
PAIR(GL_RG16F),
PAIR(GL_RG32F),
PAIR(GL_R8I),
PAIR(GL_R8UI),
PAIR(GL_R16I),
PAIR(GL_R16UI),
PAIR(GL_R32I),
PAIR(GL_R32UI),
PAIR(GL_RG8I),
PAIR(GL_RG8UI),
PAIR(GL_RG16I),
PAIR(GL_RG16UI),
PAIR(GL_RG32I),
PAIR(GL_RG32UI),
};

const std::unordered_map<unsigned int, std::string> GlEnumToString::framebuffer = {
PAIR(GL_FRAMEBUFFER),
PAIR(GL_RENDERBUFFER),
PAIR(GL_TEXTURE),
PAIR(GL_NONE),
};

const std::string GlEnumToString::get(const std::unordered_map<unsigned int, std::string>& map, unsigned int key)
{
   auto it = map.find(key);
   if (it == map.end())
   {
      return "ERROR";
   }
   return it->second;
}

const std::string GlEnumToString::get_type(unsigned int key)
{
   return get(type, key);
}

const std::string GlEnumToString::get_tex(unsigned int key)
{
   return get(texture, key);
}

const std::string GlEnumToString::get_fbo(unsigned int key)
{
   return get(framebuffer, key);
}